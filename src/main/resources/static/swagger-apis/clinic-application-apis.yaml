swagger: "2.0"
info:
  version: "1.0.0"
  title: "B5IT Final Project Clinic Application APIs"
  description: "B5IT Final Project Clinic Application APIs."
host: "127.0.0.1:9094"
schemes:
  - "http"
tags:
  - name: "receptionist"
    description: "all about apis of receptionist."
  - name: "patient-reservation"
    description: "all about apis of patients-reservations."
  - name: "doctor"
    description: "all about apis of doctors."
  - name: "laboratory"
    description: "all about apis of laboratories."
  - name: "manager"
    description: "all about apis of managers."
  - name: "notifications"
    description: "all about apis of notifications."
  - name: "reports"
    description: "all about apis of reports."
paths:
  /api/v1/receptionists:
    get:
      tags:
        - "receptionist"
      summary: "find all receptionists."
      description: "find all receptionists."
      produces:
        - "application/json"
      responses:
        200:
          description: "OK"
    post:
      tags:
        - "receptionist"
      summary: "create new receptionist."
      description: "create new receptionist."
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "receptionistRequest"
          description: "receptionist data"
          required: true
          schema:
            $ref: "#/definitions/CreateReceptionistDto"
      responses:
        200:
          description: "OK"

  /api/v1/receptionists/{id}:
    get:
      tags:
        - "receptionist"
      summary: "find receptionist by id."
      description: "find receptionist by id."
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "id"
          description: "the receptionist id."
          required: true
          type: "string"
      responses:
        200:
          description: "OK"
    put:
      tags:
        - "receptionist"
      summary: "update receptionist."
      description: "update receptionist."
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "id"
          description: "the receptionist id."
          required: true
          type: "string"
        - in: "body"
          name: "receptionistRequest"
          description: "receptionist data"
          required: true
          schema:
            $ref: "#/definitions/UpdateReceptionistDto"
      responses:
        200:
          description: "OK"

  /api/v1/receptionists/{id}/deactivate:
    delete:
      tags:
        - "receptionist"
      summary: "deactivate receptionist."
      description: "deactivate receptionist."
      parameters:
        - in: "path"
          name: "id"
          description: "the receptionist id."
          required: true
          type: "string"
      responses:
        200:
          description: "OK"

  /api/v1/receptionists/{id}/activate:
    put:
      tags:
        - "receptionist"
      summary: "activate receptionist."
      description: "activate receptionist."
      parameters:
        - in: "path"
          name: "id"
          description: "the receptionist id."
          required: true
          type: "string"
      responses:
        200:
          description: "OK"

  /api/v1/patients-reservations:
    get:
      tags:
        - "patient-reservation"
      summary: "find all patients reservations."
      description: "find all patients reservations."
      produces:
        - "application/json"
      responses:
        200:
          description: "OK"

  /api/v1/receptionists/{receptionistId}/patients-reservations:
    get:
      tags:
        - "patient-reservation"
      summary: "find all patients reservations by receptionist id."
      description: "find all patients reservations by receptionist id."
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "receptionistId"
          description: "the receptionist id."
          required: true
          type: "string"
      responses:
        200:
          description: "OK"
    post:
      tags:
        - "patient-reservation"
      summary: "create new patient reservation."
      description: "create new patient reservation."
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "receptionistId"
          description: "the receptionist id."
          required: true
          type: "string"
        - in: "body"
          name: "patientReservationRequest"
          description: "patient reservation data"
          required: true
          schema:
            $ref: "#/definitions/CreatePatientReservationDto"
      responses:
        200:
          description: "OK"

  /api/v1/receptionists/{receptionistId}/patients-reservations/{patientReservationId}:
    get:
      tags:
        - "patient-reservation"
      summary: "find all patients reservations by id."
      description: "find all patients reservations by id."
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "receptionistId"
          description: "the receptionist id."
          required: true
          type: "string"
        - in: "path"
          name: "patientReservationId"
          description: "the patient reservation id."
          required: true
          type: "string"
      responses:
        200:
          description: "OK"
    put:
      tags:
        - "patient-reservation"
      summary: "update patient reservation."
      description: "update patient reservation."
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "receptionistId"
          description: "the receptionist id."
          required: true
          type: "string"
        - in: "path"
          name: "patientReservationId"
          description: "the patient reservation id."
          required: true
          type: "string"
        - in: "body"
          name: "patientReservationRequest"
          description: "patient reservation data"
          required: true
          schema:
            $ref: "#/definitions/UpdatePatientReservationDto"
      responses:
        200:
          description: "OK"

  /api/v1/patients-reservations/{reservationId}/patients-checks:
    get:
      tags:
        - "patient-reservation"
      summary: "find patient check by reservation id."
      description: "find patient check by reservation id."
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "reservationId"
          description: "the reservation id."
          required: true
          type: "string"
      responses:
        200:
          description: "OK"

  /api/v1/doctors:
    get:
      tags:
        - "doctor"
      summary: "find all doctors."
      description: "find all doctors."
      produces:
        - "application/json"
      responses:
        200:
          description: "OK"
    post:
      tags:
        - "doctor"
      summary: "create new doctor."
      description: "create new doctor."
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "doctorRequest"
          description: "doctor data"
          required: true
          schema:
            $ref: "#/definitions/CreateDoctorDto"
      responses:
        200:
          description: "OK"

  /api/v1/doctors/{id}:
    get:
      tags:
        - "doctor"
      summary: "find doctor by id."
      description: "find doctor by id."
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "id"
          description: "the doctor id."
          required: true
          type: "string"
      responses:
        200:
          description: "OK"
    put:
      tags:
        - "doctor"
      summary: "update doctor."
      description: "update doctor."
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "id"
          description: "the doctor id."
          required: true
          type: "string"
        - in: "body"
          name: "doctorRequest"
          description: "doctor data"
          required: true
          schema:
            $ref: "#/definitions/UpdateDoctorDto"
      responses:
        200:
          description: "OK"

  /api/v1/doctors/{id}/deactivate:
    delete:
      tags:
        - "doctor"
      summary: "deactivate doctor."
      description: "deactivate doctor."
      parameters:
        - in: "path"
          name: "id"
          description: "the doctor id."
          required: true
          type: "string"
      responses:
        200:
          description: "OK"

  /api/v1/doctors/{id}/activate:
    put:
      tags:
        - "doctor"
      summary: "activate doctor."
      description: "activate doctor."
      parameters:
        - in: "path"
          name: "id"
          description: "the doctor id."
          required: true
          type: "string"
      responses:
        200:
          description: "OK"

  /api/v1/doctors-list:
    get:
      tags:
        - "doctor"
      summary: "find all doctors list."
      description: "find all doctors list."
      produces:
        - "application/json"
      responses:
        200:
          description: "OK"

  /api/v1/doctors/{id}/patients-reservations:
    get:
      tags:
        - "doctor"
      summary: "find all patients reservations by doctor id."
      description: "find all patients reservations by doctor id."
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "id"
          description: "the doctor id."
          required: true
          type: "string"
      responses:
        200:
          description: "OK"

  /api/v1/laboratories:
    get:
      tags:
        - "laboratory"
      summary: "find all laboratories."
      description: "find all laboratories."
      produces:
        - "application/json"
      responses:
        200:
          description: "OK"
    post:
      tags:
        - "laboratory"
      summary: "create new laboratory."
      description: "create new laboratory."
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "laboratoryRequest"
          description: "laboratory data"
          required: true
          schema:
            $ref: "#/definitions/CreateLaboratoryDto"
      responses:
        200:
          description: "OK"

  /api/v1/laboratories/{id}:
    get:
      tags:
        - "laboratory"
      summary: "find laboratory by id."
      description: "find laboratory by id."
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "id"
          description: "the laboratory id."
          required: true
          type: "string"
      responses:
        200:
          description: "OK"
    put:
      tags:
        - "laboratory"
      summary: "update laboratory."
      description: "update laboratory."
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "id"
          description: "the laboratory id."
          required: true
          type: "string"
        - in: "body"
          name: "laboratoryRequest"
          description: "laboratory data"
          required: true
          schema:
            $ref: "#/definitions/UpdateLaboratoryDto"
      responses:
        200:
          description: "OK"

  /api/v1/laboratories/{id}/deactivate:
    delete:
      tags:
        - "laboratory"
      summary: "deactivate laboratory."
      description: "deactivate laboratory."
      parameters:
        - in: "path"
          name: "id"
          description: "the laboratory id."
          required: true
          type: "string"
      responses:
        200:
          description: "OK"

  /api/v1/laboratories/{id}/activate:
    put:
      tags:
        - "laboratory"
      summary: "activate laboratory."
      description: "activate laboratory."
      parameters:
        - in: "path"
          name: "id"
          description: "the laboratory id."
          required: true
          type: "string"
      responses:
        200:
          description: "OK"

  /api/v1/managers:
    get:
      tags:
        - "manager"
      summary: "find all managers."
      description: "find all managers."
      produces:
        - "application/json"
      responses:
        200:
          description: "OK"
    post:
      tags:
        - "manager"
      summary: "create new manager."
      description: "create new manager."
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "managerRequest"
          description: "manager data"
          required: true
          schema:
            $ref: "#/definitions/CreateManagerDto"
      responses:
        200:
          description: "OK"

  /api/v1/managers/{id}:
    get:
      tags:
        - "manager"
      summary: "find manager by id."
      description: "find manager by id."
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "id"
          description: "the manager id."
          required: true
          type: "string"
      responses:
        200:
          description: "OK"
    put:
      tags:
        - "manager"
      summary: "update manager."
      description: "update manager."
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "id"
          description: "the manager id."
          required: true
          type: "string"
        - in: "body"
          name: "managerRequest"
          description: "manager data"
          required: true
          schema:
            $ref: "#/definitions/UpdateManagerDto"
      responses:
        200:
          description: "OK"

  /api/v1/managers/{id}/deactivate:
    delete:
      tags:
        - "manager"
      summary: "deactivate manager."
      description: "deactivate manager."
      parameters:
        - in: "path"
          name: "id"
          description: "the manager id."
          required: true
          type: "string"
      responses:
        200:
          description: "OK"

  /api/v1/managers/{id}/activate:
    put:
      tags:
        - "manager"
      summary: "activate manager."
      description: "activate manager."
      parameters:
        - in: "path"
          name: "id"
          description: "the manager id."
          required: true
          type: "string"
      responses:
        200:
          description: "OK"

  /api/v1/notifications/send-email:
    post:
      tags:
        - "notifications"
      summary: "send email message"
      description: "send email message"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "emailMessageContentInput"
          description: "email message content data"
          required: true
          schema:
            $ref: "#/definitions/EmailMessageContent"
      responses:
        200:
          description: "OK"

  /api/v1/reports/users-chart-data:
    get:
      tags:
        - "reports"
      summary: "users-chart-data report."
      description: "users-chart-data report."
      produces:
        - "application/json"
      responses:
        200:
          description: "OK"

  /api/v1/reports/patients-reservations-chart-data:
    get:
      tags:
        - "reports"
      summary: "patients-reservations-chart-data report."
      description: "patients-reservations-chart-data report."
      produces:
        - "application/json"
      responses:
        200:
          description: "OK"

definitions:
  CreateReceptionistDto:
    type: "object"
    properties:
      fullName:
        type: "string"
        example: "Rufida Nabeel Salem"
      gender:
        type: "string"
        enum:
          - "FEMALE"
          - "MALE"
      phone:
        type: "string"
        example: "777666555"
      email:
        type: "string"
        example: "rufida@email.com"
      userName:
        type: "string"
        example: "rufida"
      password:
        type: "string"
        example: "12345"

  UpdateReceptionistDto:
    type: "object"
    properties:
      fullName:
        type: "string"
        example: "Sahar Omar Ali"
      gender:
        type: "string"
        enum:
          - "FEMALE"
          - "MALE"
      phone:
        type: "string"
        example: "777666555"
      email:
        type: "string"
        example: "test@email.com"

  CreatePatientReservationDto:
    type: "object"
    properties:
      fullName:
        type: "string"
        example: "Sahar Omar Ali"
      gender:
        type: "string"
        enum:
          - "FEMALE"
          - "MALE"
      age:
        type: integer
        example: 20
      email:
        type: "string"
        example: "sahar@email.com"
      phone:
        type: "string"
        example: "777666555"
      feeling:
        type: "string"
        example: "she is very sick."
      doctorId:
        type: integer
        example: 1

  UpdatePatientReservationDto:
    type: "object"
    properties:
      fullName:
        type: "string"
        example: "Sahar Omar Ali"
      gender:
        type: "string"
        enum:
          - "FEMALE"
          - "MALE"
      age:
        type: "integer"
        example: 22
      phone:
        type: "string"
        example: "777666555"
      email:
        type: "string"
        example: "sahar@email.com"
      feeling:
        type: "string"
        example: "she is very sick."
      doctorId:
        type: integer
        example: 1

  CreateDoctorDto:
    type: "object"
    properties:
      fullName:
        type: "string"
        example: "Amal Ali Salem"
      gender:
        type: "string"
        enum:
          - "FEMALE"
          - "MALE"
      phone:
        type: "string"
        example: "777666555"
      email:
        type: "string"
        example: "amal@email.com"
      type:
        type: "string"
        enum:
          - "GENERAL"
          - "PEDIATRICIAN"
          - "CARDIOLOGIST"
      userName:
        type: "string"
        example: "amal"
      password:
        type: "string"
        example: "12345"

  UpdateDoctorDto:
    type: "object"
    properties:
      fullName:
        type: "string"
        example: "Amal Ali Salem"
      gender:
        type: "string"
        enum:
          - "FEMALE"
          - "MALE"
      phone:
        type: "string"
        example: "777666555"
      email:
        type: "string"
        example: "amal@email.com"
      type:
        type: "string"
        enum:
          - "GENERAL"
          - "PEDIATRICIAN"
          - "CARDIOLOGIST"

  CreateLaboratoryDto:
    type: "object"
    properties:
      fullName:
        type: "string"
        example: "Samia Yasser Ahmed"
      gender:
        type: "string"
        enum:
          - "FEMALE"
          - "MALE"
      phone:
        type: "string"
        example: "777666555"
      email:
        type: "string"
        example: "samia@email.com"
      userName:
        type: "string"
        example: "samia"
      password:
        type: "string"
        example: "12345"

  UpdateLaboratoryDto:
    type: "object"
    properties:
      fullName:
        type: "string"
        example: "Samia Yasser Ahmed"
      gender:
        type: "string"
        enum:
          - "FEMALE"
          - "MALE"
      phone:
        type: "string"
        example: "777666555"
      email:
        type: "string"
        example: "samia@email.com"

  CreateManagerDto:
    type: "object"
    properties:
      fullName:
        type: "string"
        example: "Donia Ahmed Mohammed"
      gender:
        type: "string"
        enum:
          - "FEMALE"
          - "MALE"
      phone:
        type: "string"
        example: "777666555"
      email:
        type: "string"
        example: "Donia@email.com"
      userName:
        type: "string"
        example: "Donia"
      password:
        type: "string"
        example: "12345"

  UpdateManagerDto:
    type: "object"
    properties:
      fullName:
        type: "string"
        example: "Donia Ahmed Mohammed"
      gender:
        type: "string"
        enum:
          - "FEMALE"
          - "MALE"
      phone:
        type: "string"
        example: "777666555"
      email:
        type: "string"
        example: "donia@email.com"

  EmailMessageContent:
    type: "object"
    properties:
      emailAddress:
        type: "string"
        example: "user@gmail.com"
      senderName:
        type: "string"
        example: "test user"
      messageContent:
        type: "string"
        example: "send test user email message"